name: scion_management

docstring: |
   Manages SciON users, organizations, assets and supporting resources.

dependencies: [resource_registry, identity_management, org_management, resource_management]

methods:

  # ---------------------------------------------------------------------------
  # SciON users

  read_user:
    docstring: Returns details for a user.
    in:
      #@UserContextId
      user_id: ""
    out:
      user_info: {}
    throws:
      NotFound: object with specified id does not exist

  define_user:
    docstring: Create or updates a user with given attributes.
    in:
      first_name: ""
      last_name: ""
      username: ""
      password: ""
      email: ""
      attributes: {}
    out:
      user_id: ""
    throws:
      NotFound: object with specified id does not exist
      BadRequest: user could not be created

  update_user_contact:
    docstring: Updates entire user contact information or individual contact entries
    in:
      #@UserContextId
      user_id: ""
      contact: !ContactInformation
      contact_entries: {}
    out:
    throws:
      BadRequest: arguments invalid or incomplete
      NotFound: object with specified id does not exist

  delete_user:
    docstring: Deletes a user.
    in:
      #@UserContextId
      user_id: ""
    out:
    throws:
      NotFound: object with specified id does not exist

  update_user_profile:
    docstring: Updates individual entries in the user's profile (ActorIdentity.details.profile dict).
    in:
      #@UserContextId
      user_id: ""
      profile_entries: {}
    out:
    throws:
      NotFound: object with specified id does not exist

  get_user_profile:
    doctring: |
      Returns entries from the user's profile.
      Returns only the settings entries with keys matching given settings_filter, if provided
    in:
      #@UserContextId
      user_id: ""
      settings_filter: []
    out:
      profile_entries: {}
    throws:
      NotFound: object with specified id does not exist

  # ---------------------------------------------------------------------------
  # Instruments

  find_instruments:
    docstring: |
      Returns matching instruments
    in:
    out:
      instrument_list: []
    throws:
      BadRequest: arguments invalid or incomplete


  # ---------------------------------------------------------------------------
  # Datasets

  find_datasets:
    docstring: |
      Returns matching datasets
    in:
    out:
      dataset_list: []
    throws:
      BadRequest: arguments invalid or incomplete

  get_asset_data:
    docstring: |
      Returns data for an asset such as an instrument
    in:
      asset_id: ""
      data_format: ""
      data_filter: {}
    out:
      data: {}
    throws:
      BadRequest: arguments invalid or incomplete

  # ---------------------------------------------------------------------------
  # Agents

  start_agent:
    docstring: |
      Starts an agent based on a given resource (instrument or similar)
    in:
      asset_id: ""
      arguments: {}
    out:
      process_id: ""
    throws:
      BadRequest: arguments invalid or incomplete
      NotFound: object with specified id does not exist

  stop_agent:
    docstring: |
      Stops an agent based on a given resource (instrument or similar or process)
    in:
      asset_id: ""
    out:
    throws:
      BadRequest: arguments invalid or incomplete
      NotFound: object with specified id does not exist
